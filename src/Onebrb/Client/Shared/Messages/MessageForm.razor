@using Onebrb.Core.Dtos.Messages;
@using System.Text;
@using System.Text.Json;
@using System.Net.Http
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Onebrb.Client.Settings
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable

@*Existing conversations*@
<IndividualConversation ConversationWith="@Recipient"></IndividualConversation>

<div class="message-form">
    <Notification CssClass="@NotificationCssClass" Message="@ResponseMessage"></Notification>

    <EditForm Model="@viewModel" OnValidSubmit="SendMessage">
        <DataAnnotationsValidator />

        <h3>Messaging @Recipient</h3>

        <InputText type="hidden" @bind-Value="@Recipient" class="form-control"></InputText>
        <div class="form-group">
            Title:
            <InputText type="text" @bind-Value="@viewModel.Title" class="form-control"></InputText>
        </div>
        <div class="form-group">
            Text:
            <InputTextArea @bind-Value="@viewModel.Body" class="form-control"></InputTextArea>
        </div>
        <button class="btn btn-success" title="Send" disabled="@IsSendBtnDisabled">
            <i class="fas fa-paper-plane fas--space-right"></i>Send
        </button>
        <a class="btn btn-secondary" href="javascript:void(0)" title="Cancel" @onclick="CancelReply">
            <i class="fas fa-window-close fas--space-right"></i>Cancel
        </a>
    </EditForm>
</div>


@code {
    private MessageDto viewModel = new MessageDto();
    private HttpResponseMessage response;

    [Parameter]
    public string Recipient { get; set; }

    public string ResponseMessage { get; set; }
    public string NotificationCssClass { get; set; }
    public bool IsSendBtnDisabled { get; set; } = true;

    // Settings
    public ApiSettings ApiSettings { get; private set; }
    public UsersSettings UsersSettings { get; private set; }
    public MessagesSettings MessageSettings { get; set; }
    public UIMessages UIMessages { get; set; }
    public UIStyles UIStyles { get; set; }

    // SignalR
    private HubConnection hubConnection;

    // Text messages

    [Parameter]
    public bool ShowReplyForm { get; set; } = true;

    [Parameter]
    public EventCallback<bool> ShowReplyFormChanged { get; set; }

    private async Task SendMessage()
    {
        if (IsSendBtnDisabled)
        {
            return;
        }

        if (viewModel != null && Recipient != null)
        {
            viewModel.RecipientUserName = Recipient;

            string jsonString = JsonSerializer.Serialize(viewModel);

            if (!string.IsNullOrEmpty(jsonString))
            {
                NotificationCssClass = UIStyles.AlertInfo;
                ResponseMessage = UIMessages.SendingMessage;

                response = await Http.PostAsync(MessageSettings.CreateApiEndpoint,
                    new StringContent(jsonString, Encoding.UTF8, "application/json"));

                if (response != null && response.IsSuccessStatusCode)
                {
                    IsSendBtnDisabled = true;
                    ResponseMessage = UIMessages.MessageSent;
                    NotificationCssClass = UIStyles.AlertSuccess;

                    // SignalR
                    hubConnection = new HubConnectionBuilder()
                                        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                                        .Build();

                    await hubConnection.StartAsync();

                    await hubConnection.SendAsync("SendMessage", viewModel.Title, viewModel.Body);
                }
                else
                {
                    IsSendBtnDisabled = true;
                    ResponseMessage = UIMessages.MessageSendingFailed;
                    NotificationCssClass = UIStyles.AlertDanger;
                }
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        MessageSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().MessagesSettings;
        UIMessages = Configuration.GetSection(nameof(UISettings)).Get<UISettings>().UIMessages;
        UIStyles = Configuration.GetSection(nameof(UISettings)).Get<UISettings>().UIStyles;
        UsersSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().UsersSettings;

        var response = await Http.GetAsync($"{UsersSettings.GetUserApiEndpoint}/{Recipient}");

        // The recipient username doesn't exist
        if (!response.IsSuccessStatusCode)
        {
            NotificationCssClass = UIStyles.AlertDanger;
            ResponseMessage = UIMessages.UserNotFound;
        }
        else
        {
            IsSendBtnDisabled = false;
        }

    }

    private Task CancelReply()
    {
        ResponseMessage = UIMessages.PleaseWait;
        ShowReplyForm = false;

        return ShowReplyFormChanged.InvokeAsync(false);
    }
    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
