@using Onebrb.Core.Dtos.Messages
@using Onebrb.Client.Settings
@using Onebrb.Core.Dtos.User 
@using Microsoft.Extensions.Configuration
@using System.Net.Http
@using System.Text.Json; 
@using System.Collections.Generic
@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager

<Notification CssClass="@CssClass" Message="@StatusMessage" />

<div class="messages-list-options">
    <button class="btn btn-primary" @onclick="@(e => OnMessageOptionsButtonClick("received"))">Received</button>
    <button class="btn btn-primary" @onclick="@(e => OnMessageOptionsButtonClick("sent"))">Sent</button>
    <button class="btn btn-primary" @onclick="@(e => OnMessageOptionsButtonClick("archived"))">Archived</button>
</div>

@if (ShowReplyForm)
{
    <MessageForm Recipient="@Recipient.UserName" @bind-ShowReplyForm="ShowReplyForm"></MessageForm>
}
else if (Model?.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Title</th>
                <th scope="col">Text</th>
                <th scope="col">Date Sent</th>
                <th scope="col">From</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                MessageDto messageDto = @Model[i];

                <tr>
                    <th scope="row">@(i+1)</th>
                    <td>@Model[i].Title</td>
                    <td>@Model[i].Body</td>
                    <td>@Model[i].DateSent</td>
                    <td><a href="/users/@Model[i].AuthorUserName">@Model[i].AuthorUserName</a></td>
                    <td>
                        <button title="Reply" class="btn btn-success"
                                @onclick="@(e => ReplyMessage(messageDto))">
                            <i class="fas fa-reply"></i>
                        </button>
                        <button title="Delete" class="btn btn-danger"
                                @onclick="@(e => DeleteMessage(messageDto.Id))">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>

}
@code {
    public List<MessageDto> Model { get; set; }

    // Settings
    public MessagesSettings MessageSettings { get; set; }
    public UsersSettings UsersSettings { get; set; }
    public UIMessages UIMessages { get; set; }
    public UIStyles UIStyles { get; set; }

    public bool ShowReplyForm { get; set; }
    public UserDto Recipient { get; set; }
    public string CssClass { get; set; }
    public string StatusMessage { get; set; }

    private List<string> messages = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        MessageSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().MessagesSettings;
        UsersSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().UsersSettings;
        UIMessages = Configuration.GetSection(nameof(UISettings)).Get<UISettings>().UIMessages;
        UIStyles = Configuration.GetSection(nameof(UISettings)).Get<UISettings>().UIStyles;

        CssClass = UIStyles.AlertInfo;
        StatusMessage = UIMessages.Loading;

        Model = await Http.GetFromJsonAsync<List<MessageDto>>($"{MessageSettings.GetAllApiEndpoint}");

        if (Model != null && Model.Count > 0)
        {
            StatusMessage = UIMessages.ReceivedMessages;
            // Show only the last message from a given user
            Model = Model.OrderByDescending(x => x.DateSent).GroupBy(x => x.AuthorId).Select(x => x.First()).ToList();
        }
        else
        {
            StatusMessage = UIMessages.ReceivedMessagesEmpty;
        }
    }

    private async Task DeleteMessage(int id)
    {
        StatusMessage = UIMessages.DeletingMessage;

        var result = await Http.DeleteAsync($"{MessageSettings.DeleteApiEndpoint}/{id}");

        if (!result.IsSuccessStatusCode)
        {
            StatusMessage = UIMessages.DeletingMessageFailed;
        }
        else
        {
            StatusMessage = UIMessages.DeletingMessageSuccess;
        }

        if (Model != null && Model.Count > 0)
        {
            var messageToDelete = Model.FirstOrDefault(x => x.Id == id);
            Model.Remove(messageToDelete);
        }
    }

    private async Task ReplyMessage(MessageDto messageDto)
    {
        StatusMessage = UIMessages.PleaseWait;

        var response = await Http.GetAsync($"{UsersSettings.GetUserApiEndpoint}/{messageDto.AuthorId}");

        if (!response.IsSuccessStatusCode)
        {
            CssClass = UIStyles.AlertDanger;
            StatusMessage = UIMessages.UserNotFound;
        }
        else
        {
            StatusMessage = $"Replying to {messageDto.AuthorUserName}";
            ShowReplyForm = true;

            // Get recipient
            var jsonString = await response.Content.ReadAsStringAsync();
            Recipient = JsonSerializer.Deserialize<UserDto>(jsonString,
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }

    }

    private async Task OnMessageOptionsButtonClick(string type = "received")
    {
        ShowReplyForm = false;

        MessageSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().MessagesSettings;
        UsersSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().UsersSettings;

        switch (type)
        {
            case "sent":
                Model = await Http.GetFromJsonAsync<List<MessageDto>>($"{MessageSettings.GetAllSentApiEndpoint}");

                if (Model != null && Model.Count > 0)
                {
                    StatusMessage = UIMessages.SentMessages;
                }
                else
                {
                    StatusMessage = UIMessages.SentMessagesEmpty;
                }
                break;
            case "received":
                Model = await Http.GetFromJsonAsync<List<MessageDto>>($"{MessageSettings.GetAllReceivedApiEndpoint}");

                if (Model != null && Model.Count > 0)
                {
                    StatusMessage = UIMessages.ReceivedMessages;
                }
                else
                {
                    StatusMessage = UIMessages.ReceivedMessagesEmpty;
                }
                break;
            case "archived":
                Model = await Http.GetFromJsonAsync<List<MessageDto>>($"{MessageSettings.GetAllArchivedApiEndpoint}");

                if (Model != null && Model.Count > 0)
                {
                    StatusMessage = UIMessages.ArchivedMessages;
                }
                else
                {
                    StatusMessage = UIMessages.ArchivedMessagesEmpty;
                }
                break;
            default:
                Model = await Http.GetFromJsonAsync<List<MessageDto>>($"{MessageSettings.GetAllReceivedApiEndpoint}");

                if (Model != null && Model.Count > 0)
                {
                    StatusMessage = UIMessages.ReceivedMessages;
                }
                else
                {
                    StatusMessage = UIMessages.ReceivedMessagesEmpty;
                }
                break;
        }

        Model = Model.OrderByDescending(x => x.DateSent).GroupBy(x => x.AuthorId).Select(x => x.First()).ToList();
    }
}
