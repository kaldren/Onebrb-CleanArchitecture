@using System.Text;
@using System.Text.Json;
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.SignalR.Client
@using Onebrb.Core.Dtos.Messages
@using Onebrb.Client.Settings
@using Onebrb.Core.Dtos.User
@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable

<Notification CssClass="@NotificationCssClass" Message="@ResponseMessage"></Notification>

@if (Messages?.Count > 0)
{
    <ul class="individual-conversation">
        @for (int i = 0; i < Messages.Count; i++)
        {
            <li class="individual-conversation-item">
                <span class="individual-conversation-author">@Messages[i].AuthorUserName</span>
                <span class="individual-conversation-message">@Messages[i].Body</span>
            </li>
        }
        @foreach (var message in newMessages)
        {
            <li class="individual-conversation-item">
                <span class="individual-conversation-author">@message.Author</span>
                <span class="individual-conversation-message">@message.Body</span>
            </li>
        }
    </ul>
}


@code {

    private HubConnection hubConnection;
    private List<MessageStruct> newMessages = new List<MessageStruct>();

    // Settings
    public ApiSettings ApiSettings { get; private set; }
    public UsersSettings UsersSettings { get; private set; }
    public MessagesSettings MessageSettings { get; set; }
    public UIMessages UIMessages { get; set; }
    public UIStyles UIStyles { get; set; }

    public List<MessageDto> Messages { get; set; }
    public UserDto OtherUser { get; set; }

    [Parameter]
    public string ConversationWith { get; set; }

    public string ResponseMessage { get; set; }
    public string NotificationCssClass { get; set; }
    public string StatusMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MessageSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().MessagesSettings;
        UIMessages = Configuration.GetSection(nameof(UISettings)).Get<UISettings>().UIMessages;
        UIStyles = Configuration.GetSection(nameof(UISettings)).Get<UISettings>().UIStyles;
        UsersSettings = Configuration.GetSection(nameof(ApiSettings)).Get<ApiSettings>().UsersSettings;

        StatusMessage = UIMessages.Loading;

        hubConnection = new HubConnectionBuilder()
                            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            newMessages.Add(new MessageStruct
            {
                Author = user,
                Body = message
            });

            StateHasChanged();
        });

        await hubConnection.StartAsync();

        var response = await Http.GetAsync($"{UsersSettings.GetUserApiEndpoint}/{ConversationWith}");

        // The recipient username doesn't exist
        if (!response.IsSuccessStatusCode)
        {
            NotificationCssClass = UIStyles.AlertDanger;
            ResponseMessage = UIMessages.UserNotFound;
        }
        else
        {
            // Gets the other user (that we're having conversation with)
            var jsonString = await response.Content.ReadAsStringAsync();
            OtherUser = JsonSerializer.Deserialize<UserDto>(jsonString,
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            // Check for conversation
                Messages = await Http.GetFromJsonAsync<List<MessageDto>>($"api/messages?type=conversation&with={OtherUser?.Id}");

            if (Messages != null && Messages.Count > 0)
            {
                StatusMessage = UIMessages.ReceivedMessages;
                // Show only the last message from a given user
            }
            else
            {
                StatusMessage = UIMessages.ReceivedMessagesEmpty;
            }
        }
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    struct MessageStruct
    {
        public string Author { get; set; }
        public string Body { get; set; }
    }
}
